// @generated by protoc-gen-es v2.5.1 with parameter "target=ts"
// @generated from file block.proto (package block, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Transaction } from "./transaction_pb";
import { file_transaction } from "./transaction_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file block.proto.
 */
export const file_block: GenFile = /*@__PURE__*/
  fileDesc("CgtibG9jay5wcm90bxIFYmxvY2sihQIKC0Jsb2NrSGVhZGVyEg4KBkhlaWdodBgBIAEoBBISCgpQYXJlbnRIYXNoGAIgASgMEhEKCVN0YXRlUm9vdBgDIAEoDBIYChBUcmFuc2FjdGlvbnNSb290GAQgASgMEhMKC1JlY2VpcHRSb290GAUgASgMEhEKCVRpbWVzdGFtcBgGIAEoBBISCgpQcmV2cmFuZGFvGAcgASgMEhAKCFByb3Bvc2VyGAggASgMEhEKCVNpZ25hdHVyZRgJIAEoDBIPCgdHYXNVc2VkGAogASgEEhEKCUV4dHJhRGF0YRgLIAEoDBIRCglVbmNsZUhhc2gYDCABKAwSDQoFQmxvb20YDSABKAwi9AEKDUJsb2NrSGFzaERhdGESDgoGSGVpZ2h0GAEgASgEEhIKClBhcmVudEhhc2gYAiABKAwSEQoJU3RhdGVSb290GAMgASgMEhgKEFRyYW5zYWN0aW9uc1Jvb3QYBCABKAwSEwoLUmVjZWlwdFJvb3QYBSABKAwSEQoJVGltZXN0YW1wGAYgASgEEhIKClByZXZyYW5kYW8YByABKAwSEAoIUHJvcG9zZXIYCCABKAwSDwoHR2FzVXNlZBgJIAEoBBIRCglFeHRyYURhdGEYCiABKAwSEQoJVW5jbGVIYXNoGAsgASgMEg0KBUJsb29tGAwgASgMIncKBUJsb2NrEiIKBkhlYWRlchgBIAEoCzISLmJsb2NrLkJsb2NrSGVhZGVyEiYKBFR4bnMYAiADKAsyGC50cmFuc2FjdGlvbi5UcmFuc2FjdGlvbhIiCgZVbmNsZXMYAyADKAsyEi5ibG9jay5CbG9ja0hlYWRlciJSCgRCb2R5EiYKBFR4bnMYASADKAsyGC50cmFuc2FjdGlvbi5UcmFuc2FjdGlvbhIiCgZVbmNsZXMYAiADKAsyEi5ibG9jay5CbG9ja0hlYWRlckIIWgYvcHJvdG9iBnByb3RvMw", [file_transaction]);

/**
 * BlockHeader contains metadata about the block
 *
 * @generated from message block.BlockHeader
 */
export type BlockHeader = Message<"block.BlockHeader"> & {
  /**
   * Block height
   *
   * @generated from field: uint64 Height = 1;
   */
  Height: bigint;

  /**
   * Hash of the parent block
   *
   * @generated from field: bytes ParentHash = 2;
   */
  ParentHash: Uint8Array;

  /**
   * Merkle root of state
   *
   * @generated from field: bytes StateRoot = 3;
   */
  StateRoot: Uint8Array;

  /**
   * Merkle root of transactions
   *
   * @generated from field: bytes TransactionsRoot = 4;
   */
  TransactionsRoot: Uint8Array;

  /**
   * Merkle root of receipts (optional)
   *
   * @generated from field: bytes ReceiptRoot = 5;
   */
  ReceiptRoot: Uint8Array;

  /**
   * Unix time
   *
   * @generated from field: uint64 Timestamp = 6;
   */
  Timestamp: bigint;

  /**
   * Randomness from beacon chain (PoS replacement for difficulty)
   *
   * @generated from field: bytes Prevrandao = 7;
   */
  Prevrandao: Uint8Array;

  /**
   * Address of the block proposer/leader
   *
   * @generated from field: bytes Proposer = 8;
   */
  Proposer: Uint8Array;

  /**
   * Signature of the proposer
   *
   * @generated from field: bytes Signature = 9;
   */
  Signature: Uint8Array;

  /**
   * Arbitrary extra data (optional)
   *
   * @generated from field: uint64 GasUsed = 10;
   */
  GasUsed: bigint;

  /**
   * @generated from field: bytes ExtraData = 11;
   */
  ExtraData: Uint8Array;

  /**
   * @generated from field: bytes UncleHash = 12;
   */
  UncleHash: Uint8Array;

  /**
   * @generated from field: bytes Bloom = 13;
   */
  Bloom: Uint8Array;
};

/**
 * Describes the message block.BlockHeader.
 * Use `create(BlockHeaderSchema)` to create a new message.
 */
export const BlockHeaderSchema: GenMessage<BlockHeader> = /*@__PURE__*/
  messageDesc(file_block, 0);

/**
 * BlockHashData is used to calculate the block hash (does not include Signature)
 *
 * @generated from message block.BlockHashData
 */
export type BlockHashData = Message<"block.BlockHashData"> & {
  /**
   * @generated from field: uint64 Height = 1;
   */
  Height: bigint;

  /**
   * @generated from field: bytes ParentHash = 2;
   */
  ParentHash: Uint8Array;

  /**
   * @generated from field: bytes StateRoot = 3;
   */
  StateRoot: Uint8Array;

  /**
   * @generated from field: bytes TransactionsRoot = 4;
   */
  TransactionsRoot: Uint8Array;

  /**
   * @generated from field: bytes ReceiptRoot = 5;
   */
  ReceiptRoot: Uint8Array;

  /**
   * @generated from field: uint64 Timestamp = 6;
   */
  Timestamp: bigint;

  /**
   * Included in hash calculation
   *
   * @generated from field: bytes Prevrandao = 7;
   */
  Prevrandao: Uint8Array;

  /**
   * @generated from field: bytes Proposer = 8;
   */
  Proposer: Uint8Array;

  /**
   * Arbitrary extra data (optional)
   *
   * @generated from field: uint64 GasUsed = 9;
   */
  GasUsed: bigint;

  /**
   * @generated from field: bytes ExtraData = 10;
   */
  ExtraData: Uint8Array;

  /**
   * @generated from field: bytes UncleHash = 11;
   */
  UncleHash: Uint8Array;

  /**
   * @generated from field: bytes Bloom = 12;
   */
  Bloom: Uint8Array;
};

/**
 * Describes the message block.BlockHashData.
 * Use `create(BlockHashDataSchema)` to create a new message.
 */
export const BlockHashDataSchema: GenMessage<BlockHashData> = /*@__PURE__*/
  messageDesc(file_block, 1);

/**
 * Block contains the header and the list of transactions
 *
 * @generated from message block.Block
 */
export type Block = Message<"block.Block"> & {
  /**
   * Header of the block
   *
   * @generated from field: block.BlockHeader Header = 1;
   */
  Header?: BlockHeader;

  /**
   * List of transactions
   *
   * @generated from field: repeated transaction.Transaction Txns = 2;
   */
  Txns: Transaction[];

  /**
   * @generated from field: repeated block.BlockHeader Uncles = 3;
   */
  Uncles: BlockHeader[];
};

/**
 * Describes the message block.Block.
 * Use `create(BlockSchema)` to create a new message.
 */
export const BlockSchema: GenMessage<Block> = /*@__PURE__*/
  messageDesc(file_block, 2);

/**
 * @generated from message block.Body
 */
export type Body = Message<"block.Body"> & {
  /**
   * List of transactions
   *
   * @generated from field: repeated transaction.Transaction Txns = 1;
   */
  Txns: Transaction[];

  /**
   * @generated from field: repeated block.BlockHeader Uncles = 2;
   */
  Uncles: BlockHeader[];
};

/**
 * Describes the message block.Body.
 * Use `create(BodySchema)` to create a new message.
 */
export const BodySchema: GenMessage<Body> = /*@__PURE__*/
  messageDesc(file_block, 3);

